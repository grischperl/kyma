{{- if eq .Values.global.eventing.backend "nats" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nats-controller.fullname" . }}
  labels: {{- include "nats-controller.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "nats-controller.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels: {{- include "nats-controller.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "nats-controller.fullname" . }}
      terminationGracePeriodSeconds: 10
      containers:
        - image: "{{ .Values.global.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          name: nats-controller
          env:
          - name: BACKEND
            value: {{ .Values.global.eventing.backend }}
          - name: NATS_URL
            value: {{ include "nats-controller.natsServer.url" . }}
          - name: EVENT_TYPE_PREFIX
            value: {{ .Values.global.eventTypePrefix }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          livenessProbe:
            failureThreshold: {{ .Values.healthProbe.liveness.failureThreshold }}
            httpGet:
              path: {{ .Values.healthProbe.liveness.service.path }}
              port: {{ .Values.healthProbe.port }}
              scheme: {{ .Values.healthProbe.scheme }}
            initialDelaySeconds: {{ .Values.healthProbe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthProbe.liveness.periodSeconds }}
            successThreshold: {{ .Values.healthProbe.liveness.successThreshold }}
            timeoutSeconds: {{ .Values.healthProbe.liveness.timeoutSeconds }}
          readinessProbe:
            failureThreshold: {{ .Values.healthProbe.readiness.failureThreshold }}
            httpGet:
              path: {{ .Values.healthProbe.readiness.service.path }}
              port: {{ .Values.healthProbe.port }}
              scheme: {{ .Values.healthProbe.scheme }}
            initialDelaySeconds: {{ .Values.healthProbe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthProbe.readiness.periodSeconds }}
            successThreshold: {{ .Values.healthProbe.readiness.successThreshold }}
            timeoutSeconds: {{ .Values.healthProbe.readiness.timeoutSeconds }}
          {{- if .Values.global.securityContext }}
          securityContext: {{- toYaml .Values.global.securityContext | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.metrics.config.port }}
              name: {{ .Values.metrics.config.portName }}
              protocol: TCP
    {{- if .Values.global.priorityClassName }}
      priorityClassName: {{ .Values.global.priorityClassName }}
    {{- end }}
{{- end }}